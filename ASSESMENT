import numpy as np
import pandas as pd

def find_best_match(input_str, string_set):
   
    if not input_str or not string_set:
        raise ValueError("Input string or string set cannot be empty.")

    distances = np.array([[levenshtein_distance(input_str, s), s] for s in string_set])
    sorted_distances = distances[np.argsort(distances[:, 0])]
    best_match = sorted_distances[0, 1]
    next_match = sorted_distances[1, 1] if len(sorted_distances) > 1 else None
    
    return best_match, next_match

def levenshtein_distance(s1, s2):
    matrix = np.zeros((len(s1)+1, len(s2)+1), dtype=int)

    matrix[0] = np.arange(len(s2)+1)
    matrix[:,0] = np.arange(len(s1)+1)
    
    for i in range(1, len(s1)+1):
        for j in range(1, len(s2)+1):
            if s1[i-1] == s2[j-1]:
                matrix[i,j] = matrix[i-1,j-1]
            else:
                matrix[i,j] = min(matrix[i-1,j], matrix[i,j-1], matrix[i-1,j-1]) + 1
    
    return matrix[-1,-1]

input_str = "My name is shubham"
string_set = ["My name is rahul", "His name is shubham", "He is shubham", "Shubham is my friend", "No one is shubham"]

best_match, next_match = find_best_match(input_str, string_set)

print("Best match for '{}': {}".format(input_str, best_match))
print("Next possible match for '{}': {}".format(input_str, next_match))
